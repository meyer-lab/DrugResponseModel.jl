---
weave_options:
  error: false
  echo: false
---

This file plots (1) time series simulations for average of 3 replicates on top of the average data. (2) shows the quantified drug effects for this setting. (3) shows the G2 phase percentage for each drug all concentrations, beside the G2 percentage of the data for that drug across all concentrations.

```julia
import Pkg; Pkg.instantiate()
Pkg.activate(".")
using DrugResponseModel
using Plots, LinearAlgebra, Statistics
Plots.scalefontsizes(0.7)

concs, _, g1s1, g2s1 = load(189, 1);
_, _, g1s2, g2s2 = load(189, 2);
_, _, g1s3, g2s3 = load(189, 3);

g1m = (g1s1 .+ g1s2 .+ g1s3) ./ 3;
g2m = (g2s1 .+ g2s2 .+ g2s3) ./ 3;
G1S = cat(g1s1, g1s2, g1s3, dims=4);
G2S = cat(g2s1, g2s2, g2s3, dims=4);

# Simulating only 7 concentrations to help improving the fit
newconcs = concs[1:7,:];
ng1m = g1m[:, 1:7, :];
ng2m = g2m[:, 1:7, :];
# _, p = optimize_hillAll(newconcs, ng1m, ng2m)

# exponential growth, assuming nG1=nG2=1, nD1=nD2=0.
# p = [246.815, 1.53201, 0.26066, 0.573611, 0.000250779, 0.581831, 0.698425, 16.6995, 1.75911, 1.09693, 0.795781, 0.390415, 0.392315, 0.693793, 10.3353, 2.72854, 2.39486, 0.951811, 0.652654, 0.548388, 0.596213, 3.10551, 3.84515, 0.978355, 0.867345, 0.219522, 0.573921, 0.641519, 249.736, 1.22168, 0.736855, 0.921887, 0.000185764, 0.926901, 0.673717, 0.0437556, 0.0257515, 1.0, 1.0, 0.0, 0.0];

# model
p = rand(59) # dummy parameters s.t. building would not fail. We will estimate these after finishing with model modification
efcs = getODEparams(p, concs);
```

```julia
# find G1 and G2 cell number for this set of parameters
G1 = zeros(189, 7, 5)
G2 = zeros(189, 7, 5)

pCtr = zeros(9, 5)
for iii=1:5
    _, pCtr[:, iii] = DrugResponseModel.optimise_control(g1m[:, 1, iii], g2m[:, 1, iii])
end

t = LinRange(0.0, 95.0, 189)
for k=1:5 # drug number
    for i = 1:7 # concentration number
        G1[:, i, k], G2[:, i, k], _ = DrugResponseModel.newPredict(efcs[:, i, k], pCtr[:, k], t)
    end
end

# find G2 percentage
g2 = G2 ./(G1 .+ G2); # in model
gdata2 = g2m ./ (g2m .+ g1m); # in data
```

print the SSE for all drugs over all the concentrations:

```julia
# calculate the norm error (SSE)
err = zeros(5)
for i=1:5
    err[i] = norm(G1[:, :, i] - g1m[:, 1:7, i]) + norm(G2[:, :, i] - g2m[:, 1:7, i])
end
print("lapatinib: ", err[1], ", doxorubicin: ", err[2], ", gemcitabine: ", err[3], ", paclitaxel: ", err[4], ", palbociclib: ", err[5])

g1m = mean(G1S, dims = 4);
g2m = mean(G2S, dims = 4);
g1s = std(G1S, dims = 4);
g2s = std(G2S, dims = 4);

function plot_ribbon(conc, g1m, g2m, g1s, g2s, G1, G2, i, leg)
    time = LinRange(0.0, 95.0, 189)

    plot(
        time,
        g1m[:, i],
        ribbon= g1s[:, i],
        title = string(conc, "nM"),
        titlefontsize = 8,
        color = 6,
        legend=leg,
        label = "G1",
        xlabel = "time [hr]",
        ylabel = "cell number",
        alpha = 0.1,
    )
    plot!(time, G1[:, i], label = "G1 sim", color = 6, lw=1)
    plot!(time, g2m[:, i], ribbon=g2s[:, i], color = 7, label = "G2", alpha = 0.1)
    plot!(time, G2[:, i], label = "G2 sim", color = 7, lw=1)
    ylims!((0.0, 35))
end
```

### Lapatinib

time series plot

```julia
p1 = plot_ribbon(concs[1, 1], g1m[:, :, 1], g2m[:, :, 1], g1s[:, :, 1], g2s[:, :, 1], G1[:, :, 1], G2[:, :, 1], 1, true)
p = [plot_ribbon(concs[i, 1], g1m[:, :, 1], g2m[:, :, 1], g1s[:, :, 1], g2s[:, :, 1], G1[:, :, 1], G2[:, :, 1], i, false) for i=2:7]
#p1 = DrugResponseModel.plotavg(G1[:, :, 1], G2[:, :, 1], g1m[:, :, 1], g2m[:, :, 1], 1, :false, concs[1, 1])
#p =[DrugResponseModel.plotavg(G1[:, :, 1], G2[:, :, 1], g1m[:, :, 1], g2m[:, :, 1], i, :false, concs[i, 1]) for i=2:7]
plot(p1, p..., figsize=(1000, 700), dpi=150)
```

percentage plot

```julia
p1=DrugResponseModel.plotperc(g2[:, :, 1], "lap.", concs[:, 1], "model")
p2=DrugResponseModel.plotperc(gdata2[:, :, 1], "lap.", concs[:, 1], "data")
plot(p1, p2)
```

quantified response plot

```julia
DrugResponseModel.plot_parameters(concs[:, 1], efcs[:, :, 1], zeros(8, 7))
```

### Doxorubicin

time series plot

```julia
p1 = plot_ribbon(concs[1, 2], g1m[:, :, 2], g2m[:, :, 2], g1s[:, :, 2], g2s[:, :, 2], G1[:, :, 2], G2[:, :, 2], 1, true)
p = [plot_ribbon(concs[i, 2], g1m[:, :, 2], g2m[:, :, 2], g1s[:, :, 2], g2s[:, :, 2], G1[:, :, 2], G2[:, :, 2], i, false) for i=2:7]
#p1 = DrugResponseModel.plotavg(G1[:, :, 2], G2[:, :, 2], g1m[:, :, 2], g2m[:, :, 2], 1, :false, concs[1, 2])
#p =[DrugResponseModel.plotavg(G1[:, :, 2], G2[:, :, 2], g1m[:, :, 2], g2m[:, :, 2], i, :false, concs[i, 2]) for i=2:7]
plot(p1, p..., figsize=(1000, 700), dpi=150)
```

percentage plot

```julia
p1=DrugResponseModel.plotperc(g2[:, :, 2], "dox.", concs[:, 2], "model")
p2=DrugResponseModel.plotperc(gdata2[:, :, 2], "dox.", concs[:, 2], "data")
plot(p1, p2)
```

quantified response plot

```julia
DrugResponseModel.plot_parameters(concs[:, 2], efcs[:, :, 2], zeros(8,7))
```

### Gemcitabine

time series plot

```julia
p1 = plot_ribbon(concs[1, 3], g1m[:, :, 3], g2m[:, :, 3], g1s[:, :, 3], g2s[:, :, 3], G1[:, :, 3], G2[:, :, 3], 1, true)
p = [plot_ribbon(concs[i, 3], g1m[:, :, 3], g2m[:, :, 3], g1s[:, :, 3], g2s[:, :, 3], G1[:, :, 3], G2[:, :, 3], i, false) for i=2:7]
#p1 = DrugResponseModel.plotavg(G1[:, :, 3], G2[:, :, 3], g1m[:, :, 3], g2m[:, :, 3], 1, :false, concs[1, 3])
#p =[DrugResponseModel.plotavg(G1[:, :, 3], G2[:, :, 3], g1m[:, :, 3], g2m[:, :, 3], i, :false, concs[i, 3]) for i=2:7]
plot(p1, p..., figsize=(1000, 700), dpi=150)
```

percentage plot

```julia
p1=DrugResponseModel.plotperc(g2[:, :, 3], "gem.", concs[:, 3], "model")
p2=DrugResponseModel.plotperc(gdata2[:, :, 3], "gem.", concs[:, 3], "data")
plot(p1, p2)
```

quantified response plot

```julia
DrugResponseModel.plot_parameters(concs[:, 3], efcs[:, :, 3], zeros(8,7))
```

### Paclitaxel

time series plot

```julia
p1 = plot_ribbon(concs[1, 4], g1m[:, :, 4], g2m[:, :, 4], g1s[:, :, 4], g2s[:, :, 4], G1[:, :, 4], G2[:, :, 4], 1, true)
p = [plot_ribbon(concs[i, 4], g1m[:, :, 4], g2m[:, :, 4], g1s[:, :, 4], g2s[:, :, 4], G1[:, :, 4], G2[:, :, 4], i, false) for i=2:7]
#p1 = DrugResponseModel.plotavg(G1[:, :, 4], G2[:, :, 4], g1m[:, :, 4], g2m[:, :, 4], 1, :false, concs[1, 4])
#p =[DrugResponseModel.plotavg(G1[:, :, 4], G2[:, :, 4], g1m[:, :, 4], g2m[:, :, 4], i, :false, concs[i, 4]) for i=2:7]
plot(p1, p..., figsize=(1000, 700), dpi=150)
```

percentage plot

```julia
p1=DrugResponseModel.plotperc(g2[:, :, 4], "tax.", concs[:, 4], "model")
p2=DrugResponseModel.plotperc(gdata2[:, :, 4], "tax.", concs[:, 4], "data")
plot(p1, p2)
```

quantified response plot

```julia
DrugResponseModel.plot_parameters(concs[:, 4], efcs[:, :, 4], zeros(8,7))
```

### Palbociclib

time series plot

```julia
p1 = plot_ribbon(concs[1, 5], g1m[:, :, 5], g2m[:, :, 5], g1s[:, :, 5], g2s[:, :, 5], G1[:, :, 5], G2[:, :, 5], 1, true)
p = [plot_ribbon(concs[i, 5], g1m[:, :, 5], g2m[:, :, 5], g1s[:, :, 5], g2s[:, :, 5], G1[:, :, 5], G2[:, :, 5], i, false) for i=2:7]
#p1 = DrugResponseModel.plotavg(G1[:, :, 5], G2[:, :, 5], g1m[:, :, 5], g2m[:, :, 5], 1, :false, concs[1, 5])
#p =[DrugResponseModel.plotavg(G1[:, :, 5], G2[:, :, 5], g1m[:, :, 5], g2m[:, :, 5], i, :false, concs[i, 5]) for i=2:7]
plot(p1, p..., figsize=(1000, 700), dpi=150)
```

percentage plot

```julia
p1=DrugResponseModel.plotperc(g2[:, :, 5], "palb.", concs[:, 5], "model")
p2=DrugResponseModel.plotperc(gdata2[:, :, 5], "palb.", concs[:, 5], "data")
plot(p1, p2)
```

quantified response plot

```julia
DrugResponseModel.plot_parameters(concs[:, 5], efcs[:, :, 5], zeros(8,7))
```
