---
weave_options:
  error: false
  echo: false
---

Simulation and representation of the three replicates.
```julia
import Pkg; Pkg.instantiate()
Pkg.activate(".")
using DrugResponseModel
using Plots

concs, _, g1s1, g2s1 = load(189, 1);
_, _, g1s2, g2s2 = load(189, 2);
_, _, g1s3, g2s3 = load(189, 3);

g1avg = (g1s1 .+ g1s2 .+ g1s3) ./ 3; # pure data
g2avg = (g2s1 .+ g2s2 .+ g2s3) ./ 3; # pure data

# TODO: the g0 is assumed to come from only Lapatinib control. Figure out what you want to do for combination.
_, pcnt = DrugResponseModel.optimise_control(g1avg[:, 1, 1], g2avg[:, 1, 1])
g0 = DrugResponseModel.startV(pcnt)


# TODO: replace these dummy parameters with estimated ones
rep1 = rand(59);
rep2 = rand(59);
rep3 = rand(59);
ef1 = getODEparams(rep1, concs, 5);
ef2 = getODEparams(rep2, concs, 5);
ef3 = getODEparams(rep3, concs, 5);
```

```julia
G1 = zeros(189, 8, 3, 5)
G2 = zeros(189, 8, 3, 5)
for i=1:5
    G1[:, :, :, i], G2[:, :, :, i] = DrugResponseModel.predict_replicates(ef1[:, :, i], ef2[:, :, i], ef3[:, :, i], g0)
end

j=1
pl = [DrugResponseModel.plot2(G1[:, i, :, j], G2[:, i, :, j], g1s1, g1s2, g1s3, g2s1, g2s2, g2s3, concs[i, j], i, j) for i=1:8]
plot(pl..., size=(1000,700))
```

The solid lines show the three simulations, meaning, after obtaining the three sets of the parameters, we calculate the time-series simulation and find the cell number for each time-point, for the three replicates, separately. The ribbon is the bounds of std of the original data. This shows that even if the model for individual replicates, deviates a little, but on-average it doesn't deviate the standard deviation. So it is reliable. (here again for lapatinib)

```julia
avgs = zeros(9, 8, 5)
stds = zeros(9, 8, 5)

for j=1:5
    avgs[:, :, j], stds[:, :, j] = DrugResponseModel.mean_std_params(ef1[:, :, j], ef2[:, :, j], ef3[:, :, j])
end
```


## Lapatinib
```julia
j=1
pl = [DrugResponseModel.plot2(G1[:, i, :, j], G2[:, i, :, j], g1s1, g1s2, g1s3, g2s1, g2s2, g2s3, concs[i, j], i, j) for i=1:8]
plot(pl..., size=(1000,700))
```

```julia
DrugResponseModel.plot_parameters(concs[:, 1], avgs[:, :, 1], stds[:, :, 1])
```


## Doxorubicin

```julia
j=2
pl = [DrugResponseModel.plot2(G1[:, i, :, j], G2[:, i, :, j], g1s1, g1s2, g1s3, g2s1, g2s2, g2s3, concs[i, j], i, j) for i=1:8]
plot(pl..., size=(1000,700))
```

```julia
DrugResponseModel.plot_parameters(concs[:, 2], avgs[:, :, 2], stds[:, :, 2])
```

## Gemcitabine

```julia
j=3
pl = [DrugResponseModel.plot2(G1[:, i, :, j], G2[:, i, :, j], g1s1, g1s2, g1s3, g2s1, g2s2, g2s3, concs[i, j], i, j) for i=1:8]
plot(pl..., size=(1000,700))
```

```julia
DrugResponseModel.plot_parameters(concs[:, 3], avgs[:, :, 3], stds[:, :, 3])
```

## Paclitaxel

```julia
j=4
pl = [DrugResponseModel.plot2(G1[:, i, :, j], G2[:, i, :, j], g1s1, g1s2, g1s3, g2s1, g2s2, g2s3, concs[i, j], i, j) for i=1:8]
plot(pl..., size=(1000,700))
```

```julia
DrugResponseModel.plot_parameters(concs[:, 4], avgs[:, :, 4], stds[:, :, 4])
```

## Palbociclib

```julia
j=5
pl = [DrugResponseModel.plot2(G1[:, i, :, j], G2[:, i, :, j], g1s1, g1s2, g1s3, g2s1, g2s2, g2s3, concs[i, j], i, j) for i=1:8]
plot(pl..., size=(1000,700))
```

```julia
DrugResponseModel.plot_parameters(concs[:, 5], avgs[:, :, 5], stds[:, :, 5])
```
