---
weave_options:
  error: true
  echo: false
---

This file contains all the drugs simulations for the average of replicates, separately. Time series, G2 percentage, and quantified drug effects are shown.
```julia
import Pkg; Pkg.instantiate()
Pkg.activate(".")
using DrugResponseModel
using Plots, LinearAlgebra
Plots.scalefontsizes(0.7)

concs, populations1, g1s1, g2s1 = load(189, 1);
concs, populations2, g1s2, g2s2 = load(189, 2);
concs, populations3, g1s3, g2s3 = load(189, 3);
g0 = g1s1[1,1,1]+g2s1[1,1,1];

g1m = (g1s1 .+ g1s2 .+ g1s3) ./ 3;
g2m = (g2s1 .+ g2s2 .+ g2s3) ./ 3;
# G2 percentage
gdata2 = g2m ./ (g2m .+ g1m);
```

# Lapatinib
```julia
ps1= [43.1527, 0.966066, 0.149468, 1.07396, 0.20995, 0.373793, 0.0079829, 0.0202241, 0.536791, 21.7392, 7.00735, 0.101821, 1.41611];
efcs = getODEparams(ps1, concs[:, 1]);

G1 = zeros(189, 7)
G2 = zeros(189, 7)
t = LinRange(0.0, 95.0, 189)
for i = 1:7 # concentration number
    G1[:, i], G2[:, i], _ = predict(efcs[:, i], g0, t)
end
```

## time series plot
```julia; eccho=false
p1 = DrugResponseModel.plotavg(G1, G2, g1m[:, :, 1], g2m[:, :, 1], 1, :false, concs[1, 1])
p =[DrugResponseModel.plotavg(G1, G2, g1m[:, :, 1], g2m[:, :, 1], i, :false, concs[i, 1]) for i=2:7]
plot(p1, p..., figsize=(1000, 700), dpi=250)
```

## G2 percentage plot
```julia
# percentage
g2 = G2 ./(G1 .+ G2);
p1=DrugResponseModel.plotperc(g2, "lap.", concs[:, 1], "model")
p2=DrugResponseModel.plotperc(gdata2[:, :, 1], "lap.", concs[:, 1], "data")
plot(p1, p2)
```

## quantified parameters plot
```julia
DrugResponseModel.plot_parameters(concs[:, 1], efcs, zeros(4,7))
```

## print error for lapatinib:
```julia
norm(G1 - g1m[:, 1:7, 1]) + norm(G2 - g2m[:, 1:7, 1])
```

# Doxorubicin
```julia
ps2 = [95.5176, 0.141023, 0.0453853, 0.846542, 0.164408, 1.00001e-9, 0.0720467, 0.14468, 0.689475, 3.66135, 5.46383, 4.29732, 2.9077];
efcs2 = getODEparams(ps2, concs[:, 2]);

G1 = zeros(189, 7)
G2 = zeros(189, 7)
t = LinRange(0.0, 95.0, 189)
for i = 1:7 # concentration number
    G1[:, i], G2[:, i], _ = predict(efcs2[:, i], g0, t)
end
```

## time series plot
```julia; eccho=false
p1 = DrugResponseModel.plotavg(G1, G2, g1m[:, :, 2], g2m[:, :, 2], 1, :true, concs[1, 2])
p =[DrugResponseModel.plotavg(G1, G2, g1m[:, :, 2], g2m[:, :, 2], i, :false, concs[i, 2]) for i=2:7]
plot(p1, p..., figsize=(1000, 700), dpi=150)
```

## G2 percentage plot
```julia
# percentage
g2 = G2 ./(G1 .+ G2);
p1=DrugResponseModel.plotperc(g2, "dox.", concs[:, 2], "model")
p2=DrugResponseModel.plotperc(gdata2[:, :, 2], "dox.", concs[:, 2], "data")
plot(p1, p2)
```

## quantified parameters plot
```julia
DrugResponseModel.plot_parameters(concs[:, 2], efcs2, zeros(4,7))
```

## print error for doxorubicin:
```julia
norm(G1 - g1m[:, 1:7, 2]) + norm(G2 - g2m[:, 1:7, 2])
```

# Gemcitabine
```julia
ps3 = [10.7831, 0.925396, 0.93767, 1.85477, 0.219639, 0.491569, 0.00593379, 0.110279, 0.517813, 19.6588, 7.90343, 9.62803, 3.21637];
efcs3 = getODEparams(ps3, concs[:, 3]);

G1 = zeros(189, 7)
G2 = zeros(189, 7)
t = LinRange(0.0, 95.0, 189)
for i = 1:7 # concentration number
    G1[:, i], G2[:, i], _ = predict(efcs3[:, i], g0, t)
end
```

## time series plot
```julia; eccho=false
p1 = DrugResponseModel.plotavg(G1, G2, g1m[:, :, 3], g2m[:, :, 3], 1, :false, concs[1, 3])
p =[DrugResponseModel.plotavg(G1, G2, g1m[:, :, 3], g2m[:, :, 3], i, :false, concs[i, 3]) for i=2:7]
plot(p1, p..., figsize=(1000, 700), dpi=150)
```

## G2 percentage plot
```julia
# percentage
g2 = G2 ./(G1 .+ G2);
p1=DrugResponseModel.plotperc(g2, "gem.", concs[:, 3], "model")
p2=DrugResponseModel.plotperc(gdata2[:, :, 3], "gem.", concs[:, 3], "data")
plot(p1, p2)
```

## quantified parameters plot
```julia
DrugResponseModel.plot_parameters(concs[:, 3], efcs3, zeros(4,7))
```

## print error for gemcitabine
```julia
norm(G1 - g1m[:, 1:7, 3]) + norm(G2 - g2m[:, 1:7, 3])
```

# Paclitaxel
```julia
ps4 = [3.33798, 0.768057, 1.00004e-9, 3.01442, 0.27915, 0.0669792, 0.0570235, 0.0385754, 0.501908, 17.3979, 9.04839, 2.0261, 1.64753];
efcs4 = getODEparams(ps4, concs[:, 4]);

G1 = zeros(189, 7)
G2 = zeros(189, 7)
t = LinRange(0.0, 95.0, 189)
for i = 1:7 # concentration number
    G1[:, i], G2[:, i], _ = predict(efcs4[:, i], g0, t)
end
```

## time series plot
```julia; eccho=false
p1 = DrugResponseModel.plotavg(G1, G2, g1m[:, :, 4], g2m[:, :, 4], 1, :false, concs[1, 4])
p =[DrugResponseModel.plotavg(G1, G2, g1m[:, :, 4], g2m[:, :, 4], i, :false, concs[i, 4]) for i=2:7]
plot(p1, p..., figsize=(1000, 700), dpi=150)
```

## G2 percentage plot
```julia
# percentage
g2 = G2 ./(G1 .+ G2);
p1=DrugResponseModel.plotperc(g2, "tax.", concs[:, 4], "model")
p2=DrugResponseModel.plotperc(gdata2[:, :, 4], "tax.", concs[:, 4], "data")
plot(p1, p2)
```

## quantified parameters plot
```julia
DrugResponseModel.plot_parameters(concs[:, 4], efcs4, zeros(4,7))
```

## print error for paclitaxel:
```julia
norm(G1 - g1m[:, 1:7, 4]) + norm(G2 - g2m[:, 1:7, 4])
```

# Palbociclib
```julia
ps5 = [26.8681, 0.843195, 0.337619, 0.895753, 0.359512, 0.632667, 0.00720161, 0.0401928, 0.577674, 18.8691, 11.3867, 31.7324, 1.16337];
efcs5 = getODEparams(ps5, concs[:, 5]);

G1 = zeros(189, 7)
G2 = zeros(189, 7)
t = LinRange(0.0, 95.0, 189)
for i = 1:7 # concentration number
    G1[:, i], G2[:, i], _ = predict(efcs5[:, i], g0, t)
end
```

## time series plot
```julia; eccho=false
p1 = DrugResponseModel.plotavg(G1, G2, g1m[:, :, 5], g2m[:, :, 5], 1, :false, concs[1, 5])
p =[DrugResponseModel.plotavg(G1, G2, g1m[:, :, 5], g2m[:, :, 5], i, :false, concs[i, 5]) for i=2:7]
plot(p1, p..., figsize=(1000, 700), dpi=150)
```

## G2 percentage plot
```julia
# percentage
g2 = G2 ./(G1 .+ G2);
p1=DrugResponseModel.plotperc(g2, "palbo.", concs[:, 5], "model")
p2=DrugResponseModel.plotperc(gdata2[:, :, 5], "palbo.", concs[:, 5], "data")
plot(p1, p2)
```

## quantified parameters plot
```julia
DrugResponseModel.plot_parameters(concs[:, 5], efcs5, zeros(4,7))
```

## print error for palbociclib
```julia
norm(G1 - g1m[:, 1:7, 5]) + norm(G2 - g2m[:, 1:7, 5])
```
