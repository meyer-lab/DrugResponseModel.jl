---
weave_options:
  error: false
  echo: false
---

Time series simulations for some pairs of drugs.

```julia
import Pkg; Pkg.instantiate()
Pkg.activate(".")
using DrugResponseModel
using Plots, LinearAlgebra

concs, _, g1s1, g2s1 = load(189, 1);

paramAvg = [44.184, 1.24076, 0.0692788, 0.0460918, 0.3822, 0.854034, 0.605391, 0.771326, 0.0138293, 0.00183699, 0.000293753, 0.0127534, 0.00011816, 0.0142541, 60.6069, 0.899573, 1.99993, 0.0748216, 1.99326, 0.468332, 1.99864, 1.22536, 0.000141615, 0.0318616, 0.000216899, 8.80158e-7, 0.598489, 0.00110572, 6.68492, 2.05974, 1.99936, 0.167588, 0.507586, 0.316074, 0.248084, 0.826596, 1.6164e-5, 3.10987e-6, 3.55996e-5, 7.73526e-6, 0.0774056, 8.26708e-5, 3.34656, 2.83739, 0.0907361, 0.108245, 1.9758, 1.96985, 1.9993, 0.210137, 0.0690636, 1.30442e-5, 0.0767181, 0.00991078, 6.87891e-5, 1.45086e-5, 18.2253, 1.1841, 1.00505, 0.0735852, 1.97326, 0.783828, 0.45769, 1.99355, 0.0519941, 0.000533671, 0.00204743, 9.52975e-5, 5.23806e-5, 0.0677505, 0.339953, 0.403341, 0.802518, 0.470576, 1.298, 0.423103];

efcs = getODEparams(paramAvg, concs);
tim = LinRange(0.0, 96.0, 96);

""" To avoid repetition. """
function plot_combin_time(idA, idB, efcts, DrugA_name, DrugB_name, concA, concB)
  bliss_comb = DrugResponseModel.AllBliss_params(efcts[:, :, idA], efcts[:, :, idB])
  combb = bliss_comb[:, concA, concB]

  G1_lap, G2_lap = predict(efcs[:, concA, idA], efcs[:, 1, idA], tim)
  G1_dox, G2_dox = predict(efcs[:, concA, idB], efcs[:, 1, idB], tim)
  G1_com, G2_com = predict(combb, efcs[:, 1, idA], tim)

  p1 = Plots.plot(tim, G1_lap, lw=2, label=DrugA_name, xlabel="time [hr]", ylabel="G1 cell number")
  Plots.plot!(tim, G1_dox, lw=2, label=DrugB_name)
  Plots.plot!(tim, G1_com, lw=2, label="combin")
  ylims!((0.0, 40.0))

  p2 = Plots.plot(tim, G2_lap, lw=2, label=DrugA_name, xlabel="time [hr]", ylabel="G2 cell number")
  Plots.plot!(tim, G2_dox, lw=2, label=DrugB_name)
  Plots.plot!(tim, G2_com, lw=2, label="combin")
  ylims!((0.0, 40.0))

  p3 = Plots.plot(tim, G1_lap .+ G2_lap, lw=2, label=DrugA_name, xlabel="time [hr]", ylabel="total cell number")
  Plots.plot!(tim, G1_dox .+ G2_dox, lw=2, label=DrugB_name)
  Plots.plot!(tim, G1_com .+ G2_com, lw=2, label="combin")
  ylims!((0.0, 40.0))

  p4 = Plots.plot(tim, G1_lap./(G1_lap .+ G2_lap), lw=2, ylabel="%G1", xlabel="time [hr]", label=DrugA_name)
  Plots.plot!(tim, G1_dox./(G1_dox .+ G2_dox), lw=2, label=DrugB_name)
  Plots.plot!(tim, G1_com./(G1_com .+ G2_com), lw=2, label="combin.")
  ylims!((0.0, 1.0))
  Plots.plot(p1, p2, p3, p4, layout=(2,2), size=(700, 700))

end
```

# Lapatinib 100 nM with Doxorubicin 20 nM

```julia
plot_combin_time(1, 2, efcs, "lap.", "dox.", 6, 4)
```

# Lapatinib 100 nM with Gemcitabine 30 nM

```julia
plot_combin_time(1, 3, efcs, "lap.", "gem.", 6, 7)
```

# Lapatinib 250 nM with Palbociclib 50 nM

```julia
plot_combin_time(1, 5, efcs, "lap.", "palbo.", 7, 5)
```

# Paclitaxel 2 nM with Doxorubicin 20 nM

```julia
plot_combin_time(4, 2, efcs, "tax.", "dox.", 4, 4)
```

# Paclitaxel 2 nM with Gemcitabine 10 nM

```julia
plot_combin_time(4, 3, efcs, "tax.", "gem.", 4, 6)
```

# Gemcitabine 5 nM with Doxorubicin 20 nM
```julia
plot_combin_time(3, 2, efcs, "gem.", "dox.", 4, 4)
```

# Palbociclib 100 nM with Gemcitabine 10 nM
```julia
plot_combin_time(5, 3, efcs, "palbo.", "gem.", 6, 6)
```
