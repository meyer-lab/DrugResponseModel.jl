Time series simulation for a pair of drugs in their EC50 concentration based on Bliss index.

```julia; echo=false
import Pkg; Pkg.instantiate()
Pkg.activate(".")
using DrugResponseModel
using Plots, LinearAlgebra
Plots.scalefontsizes(0.7)

concs, populations1, g1s1, g2s1 = load(189, 1);
concs, populations2, g1s2, g2s2 = load(189, 2);
concs, populations3, g1s3, g2s3 = load(189, 3);
g0 = g1s1[1,1,1]+g2s1[1,1,1];

g1avg = (g1s1 .+ g1s2 .+ g1s3) ./ 3; # pure data
g2avg = (g2s1 .+ g2s2 .+ g2s3) ./ 3; # pure data
popavg = g1avg .+ g2avg


paramAvg = [97.7434, 1.41726, 0.0501761, 0.930205, 0.111494, 0.123604, 0.552216, 
     92.9045, 1.40024, 0.996396, 0.0513087, 0.521831, 0.6535, 0.566578, 
     15.5317, 2.3689, 0.592433, 0.999986, 0.0283363, 0.286975, 0.503328, 
     3.96929, 4.62768, 0.0512281, 0.307528, 0.549714, 0.378717, 0.50959, 
     63.4248, 0.976052, 0.16582, 0.740009, 0.0572609, 0.0776912, 0.534201, 
     0.734513, 0.375555, 16.8387, 12.3945, 30.176, 14.5352];
efcs = getODEparamsAll(paramAvg, concs);

EC50s = [round(paramAvg[1], digits=1), round(paramAvg[8], digits=1), round(paramAvg[15], digits=1), round(paramAvg[22], digits=1), round(paramAvg[29], digits=1)]

### Our way of Bliss combination:

params = DrugResponseModel.paramsAtEC50(paramAvg)

function BlissUnit(p1, p2)
    # p1 and p2 are Arrays 9x1 and are assumed to be from the EC50 concentration.
    combin = similar(p1)
    combin[1:2] .= p1[1:2] .+ p2[1:2] .- p1[1:2] .* p2[1:2]
    combin[3:4] .= p1[3:4] .+ p2[3:4]
    combin[5:end] .= p1[5:end]
    return combin
end

tim = 0.0:2:88.0
```


# Lapatinib and Dox
```julia; echo=false

combin = BlissUnit(params[:, 1], params[:, 2]) # lpt and dox

G1, G2 = predict(combin, g1avg[1] + g2avg[1], tim)


plot(tim, G1, label="G1", lw=2, title=string("Lpt ", EC50s[1], " & Dox ", EC50s[2]))
plot!(tim, G2, lw=2, label="G2")
plot!(tim, G1 .+ G2, label="total", lw=2, ylabel="cell number", xlabel="time [hr]")
```

# Lpt and Gemc
```julia; echo=false

combin = BlissUnit(params[:, 1], params[:, 3]) # lpt and gmc

G1, G2 = predict(combin, g1avg[1] + g2avg[1], tim)

plot(tim, G1, label="G1", lw=2, title=string("Lpt ", EC50s[1], " & Gem ", EC50s[3]))
plot!(tim, G2, lw=2, label="G2")
plot!(tim, G1 .+ G2, label="total", lw=2, ylabel="cell number", xlabel="time [hr]")
```

# Lpt and tax
```julia; echo=false

combin = BlissUnit(params[:, 1], params[:, 4]) # lpt and tax

G1, G2 = predict(combin, g1avg[1] + g2avg[1], tim)

plot(tim, G1, label="G1", lw=2, title=string("Lpt ", EC50s[1], " & Tax ", EC50s[4]))
plot!(tim, G2, lw=2, label="G2")
plot!(tim, G1 .+ G2, label="total", lw=2, ylabel="cell number", xlabel="time [hr]")
```

# Lpt and Palbo
```julia; echo=false

combin = BlissUnit(params[:, 1], params[:, 5]) # lpt and palbo

G1, G2 = predict(combin, g1avg[1] + g2avg[1], tim)

plot(tim, G1, label="G1", lw=2, title=string("Lpt ", EC50s[1], " & Palbo ", EC50s[5]))
plot!(tim, G2, lw=2, label="G2")
plot!(tim, G1 .+ G2, label="total", lw=2, ylabel="cell number", xlabel="time [hr]")
```

# Dox and Gemc
```julia; echo=false

combin = BlissUnit(params[:, 2], params[:, 3]) # dox and gmc

G1, G2 = predict(combin, g1avg[1] + g2avg[1], tim)

plot(tim, G1, label="G1", lw=2, title=string("Dox ", EC50s[2], " & Gem ", EC50s[3]))
plot!(tim, G2, lw=2, label="G2")
plot!(tim, G1 .+ G2, label="total", lw=2, ylabel="cell number", xlabel="time [hr]")
```

# Dox and Tax
```julia; echo=false

combin = BlissUnit(params[:, 2], params[:, 4]) # dox and tax

G1, G2 = predict(combin, g1avg[1] + g2avg[1], tim)

plot(tim, G1, label="G1", lw=2, title=string("Dox ", EC50s[2], " & Tax ", EC50s[4]))
plot!(tim, G2, lw=2, label="G2")
plot!(tim, G1 .+ G2, label="total", lw=2, ylabel="cell number", xlabel="time [hr]")
```

# Dox and Palbo
```julia; echo=false

combin = BlissUnit(params[:, 2], params[:, 5]) # dox and palbo

G1, G2 = predict(combin, g1avg[1] + g2avg[1], tim)

plot(tim, G1, label="G1", lw=2, title=string("Dox ", EC50s[2], " & Palbo ", EC50s[5]))
plot!(tim, G2, lw=2, label="G2")
plot!(tim, G1 .+ G2, label="total", lw=2, ylabel="cell number", xlabel="time [hr]")
```
# Gem and Tax
```julia; echo=false

combin = BlissUnit(params[:, 3], params[:, 4]) # gem and tax

G1, G2 = predict(combin, g1avg[1] + g2avg[1], tim)

plot(tim, G1, label="G1", lw=2, title=string("Gem ", EC50s[3], " & Tax ", EC50s[4]))
plot!(tim, G2, lw=2, label="G2")
plot!(tim, G1 .+ G2, label="total", lw=2, ylabel="cell number", xlabel="time [hr]")
```

# Gem and Palbo
```julia; echo=false

combin = BlissUnit(params[:, 3], params[:, 5]) # gem and palbo

G1, G2 = predict(combin, g1avg[1] + g2avg[1], tim)

plot(tim, G1, label="G1", lw=2, title=string("Gem ", EC50s[3], " & Palbo ", EC50s[5]))
plot!(tim, G2, label="G2", lw=2)
plot!(tim, G1 .+ G2, label="total", lw=2, ylabel="cell number", xlabel="time [hr]")
```

# Tax and Palbo
```julia; echo=false

combin = BlissUnit(params[:, 4], params[:, 5]) # tax and palbo

G1, G2 = predict(combin, g1avg[1] + g2avg[1], tim)

plot(tim, G1, label="G1", lw=2, title=string("Tax ", EC50s[4], " & Palbo ", EC50s[5]))
plot!(tim, G2, label="G2", lw=2)
plot!(tim, G1 .+ G2, label="total", lw=2, ylabel="cell number", xlabel="time [hr]")
```

# Weird combinations

```julia; echo=false
lapat_before = [43.1527, 0.966066, 0.149468, 1.07396, 0.20995, 0.373793, 0.0079829, 0.0202241, 0.536791, 21.7392, 7.00735, 0.101821, 1.41611];
dox_before = [95.5176, 0.141023, 0.0453853, 0.846542, 0.164408, 1.00001e-9, 0.0720467, 0.14468, 0.689475, 3.66135, 5.46383, 4.29732, 2.9077];
gemc_before = [10.7831, 0.925396, 0.93767, 1.85477, 0.219639, 0.491569, 0.00593379, 0.110279, 0.517813, 19.6588, 7.90343, 9.62803, 3.21637];
pac_before = [3.33798, 0.768057, 1.00004e-9, 3.01442, 0.27915, 0.0669792, 0.0570235, 0.0385754, 0.501908, 17.3979, 9.04839, 2.0261, 1.64753];
pal_before = [26.8681, 0.843195, 0.337619, 0.895753, 0.359512, 0.632667, 0.00720161, 0.0401928, 0.577674, 18.8691, 11.3867, 31.7324, 1.16337];
lapat = DrugResponseModel.getODEparams(lapat_before, concs[:, 1]);
dox = DrugResponseModel.getODEparams(dox_before, concs[:, 2]);
gemc = DrugResponseModel.getODEparams(gemc_before, concs[:, 3]);
pac = DrugResponseModel.getODEparams(pac_before, concs[:, 4]);
pal = DrugResponseModel.getODEparams(pal_before, concs[:, 5]);
```

## gemcitabine and taxol

```julia; echo=false
bliss_comb = DrugResponseModel.fullCombinationParam(gemc, pac, efcs, 8);

```

combination:  
This plots combination of 10nM Gemcitabine with all paclitaxel concentrations. Also we see separate drugs. 

```julia; echo=false
function plotall(tim, G1, G2, G1pac, G2pac, G1gemc, G2gemc, label1, label2, i)
    plot(tim, G1[:, i] .+ G2[:, i], lw=2, ylabel="cell number", xlabel="time [hr]", label="cmbn")
    plot!(tim, G1pac[:, i] .+ G2pac[:, i], lw=2, label=label1)
    plot!(tim, G1gemc[:, i] .+ G2gemc[:, i], lw=2, label=label2)
end

G1 = zeros(45, 8)
G2 = zeros(45, 8)
G1pac = zeros(45, 8)
G2pac = zeros(45, 8)
G1gemc = zeros(45, 8)
G2gemc = zeros(45, 8)
 
for i=1:8
    G1[:, i], G2[:, i] = predict(bliss_comb[:, 6, i], g1avg[1] + g2avg[1], tim);
    G1pac[:, i], G2pac[:, i] = predict(pac[:, i], g1avg[1] + g2avg[1], tim);
    G1gemc[:, i], G2gemc[:, i] = predict(gemc[:, i], g1avg[1] + g2avg[1], tim);
end

p = [plotall(tim, G1, G2, G1pac, G2pac, G1gemc, G2gemc, "tax", "gem", i) for i=1:8]
plot(p...)
ylims!((0.0, 60.0))

```

parameters

```julia;echo=false
function PlotunitCombin(conc::Array{Float64, 1}, drug1, drug2::Array{Float64, 1}, titles, combin::Array{Float64, 1}, combin2, label)
    concs = log.(conc)
    plot(concs, drug2, ylabel = titles, label =label[1], lw = 2, fg_legend = :transparent, shape = :circle, color = :purple)
    plot!(concs, drug1, label =label[2], lw = 2, shape = :circle, color = :red)
    plot!(concs, combin, label =label[3], lw = 2, shape = :circle, color = :green)
    plot!(concs, combin2, label =label[4], lw = 2, shape = :circle, color = :orange)
    ylims!((0.0, 1.05))
end

""" Function to plot all of the drug effects before and after drug combination. """
function plotEffectsCombin(concs::Array{Float64, 2}, gemc::Array{Float64, 2}, pac, combin::Array{Float64, 3})
    titles = ["G1 prog. rate", "G2 prog. rate", "G1 death rate", "G2 death rate"]
    labels = ["taxol alone", "gemc. alone", "taxol w/ 10nM gemc.", "taxol w/ 30nM gemc."]
    labels_no = [:false, :false, :false, :false]
    pl = [PlotunitCombin(concs[:, 4], gemc[i, :], pac[i, :], titles[i], combin[i, :, 6], combin[i, :, 7], labels_no) for i = 1:3]
    p2 = PlotunitCombin(concs[:, 4], gemc[4, :], pac[4, :], titles[4], combin[4, :, 6], combin[4, :, 7], labels)
    plot(pl..., p2, layout = (2, 2))
end
plotEffectsCombin(concs, gemc, pac, bliss_comb)
```


## Gemcitabine and palbociclib

```julia; echo=false
bliss_comb = DrugResponseModel.fullCombinationParam(gemc, pal, efcs, 8);

```

combination:
This plots combination of 30nM Gemcitabine with all palbociclib concentrations. Also we see separate drugs. 

```julia; echo=false
G1 = zeros(45, 8)
G2 = zeros(45, 8)
G1pal = zeros(45, 8)
G2pal = zeros(45, 8)
G1gemc = zeros(45, 8)
G2gemc = zeros(45, 8)

for i=1:8
    G1[:, i], G2[:, i] = predict(bliss_comb[:, 7, i], g1avg[1] + g2avg[1], tim);
    G1pal[:, i], G2pal[:, i] = predict(pal[:, i], g1avg[1] + g2avg[1], tim);
    G1gemc[:, i], G2gemc[:, i] = predict(gemc[:, i], g1avg[1] + g2avg[1], tim);
end

p = [plotall(tim, G1, G2, G1pal, G2pal, G1gemc, G2gemc, "palb", "gem", i) for i=1:8]
plot(p...)
ylims!((0.0, 60.0))
```

parameters

```julia;echo=false

""" Function to plot all of the drug effects before and after drug combination. """
function plotEffectsCombins(concs::Array{Float64, 2}, drug1, drug2::Array{Float64, 2}, combin::Array{Float64, 3})
    titles = ["G1 prog. rate", "G2 prog. rate", "G1 death rate", "G2 death rate"]
    labels = ["palbo alone", "gemc. alone", "palbo w/ 10nM gemc.", "palbo w/ 30nM gemc."]
    labels_no = [:false, :false, :false, :false]
    pl = [PlotunitCombin(concs[:, 4], drug1[i, :], drug2[i, :], titles[i], combin[i, :, 6], combin[i, :, 7], labels_no) for i = 1:3]
    p2 = PlotunitCombin(concs[:, 4], drug1[4, :], drug2[4, :], titles[4], combin[4, :, 6], combin[4, :, 7], labels)
    plot(pl..., p2, layout = (2, 2))
end
plotEffectsCombins(concs, gemc, pal, bliss_comb)
```
