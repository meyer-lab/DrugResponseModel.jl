---
weave_options:
  error: false
  echo: false
---

```julia
import Pkg; Pkg.instantiate()

Pkg.activate(".")
using DrugResponseModel
using Plots
Plots.scalefontsizes(0.7)
```
To show the sensitivity of cell number difference predicted by combination.

```julia
concs, _, g1s1, g2s1 = load(189, 1);
```

```julia
p = [44.184, 1.24076, 0.0692788, 0.0460918, 0.3822, 0.854034, 0.605391, 0.771326, 0.0138293, 0.00183699, 0.000293753, 0.0127534, 0.00011816, 0.0142541, 60.6069, 0.899573, 1.99993, 0.0748216, 1.99326, 0.468332, 1.99864, 1.22536, 0.000141615, 0.0318616, 0.000216899, 8.80158e-7, 0.598489, 0.00110572, 6.68492, 2.05974, 1.99936, 0.167588, 0.507586, 0.316074, 0.248084, 0.826596, 1.6164e-5, 3.10987e-6, 3.55996e-5, 7.73526e-6, 0.0774056, 8.26708e-5, 3.34656, 2.83739, 0.0907361, 0.108245, 1.9758, 1.96985, 1.9993, 0.210137, 0.0690636, 1.30442e-5, 0.0767181, 0.00991078, 6.87891e-5, 1.45086e-5, 18.2253, 1.1841, 1.00505, 0.0735852, 1.97326, 0.783828, 0.45769, 1.99355, 0.0519941, 0.000533671, 0.00204743, 9.52975e-5, 5.23806e-5, 0.0677505, 0.339953, 0.403341, 0.802518, 0.470576, 1.298, 0.423103];


function make_bar(p, Dr1Ind, Dr2Ind, concs, g0)
  
  lpDX1 = DrugResponseModel.get_derivative(p, Dr1Ind, Dr2Ind, concs, g0, 1)
  twoDHillp1 = DrugResponseModel.Hill_p_eachDr(lpDX1)
  lpDX2 = DrugResponseModel.get_derivative(p, Dr1Ind, Dr2Ind, concs, g0, 1)
  twoDHillp2 = DrugResponseModel.Hill_p_eachDr(lpDX2)
  names = ["LPT", "DOX", "GEM", "TAX", "PLB"]
  xaxis = ["G11_prog_max", "G12_prog_max", "G21_prog_max", "G22_prog_max", "G11_death_max", "G12_death_max", "G21_death_max", "G22_death_max"]
  p1 = bar(xaxis, twoDHillp1[3:10, Dr1Ind], title=names[Dr1Ind], xrotation=35, ylabel="d{diff}/d{p}", label="deriv.")
  p2 = bar(xaxis, twoDHillp2[3:10, Dr2Ind], title=names[Dr2Ind], xrotation=35, ylabel="d{diff}/d{p}", label="deriv.")
  plot(p1, p2)
  ylims!((-8.0, 8.0))
end
```
# LPT and DOX
```julia
Dr1Ind = 1
Dr2Ind = 2
odeParams = getODEparams(p, concs)
make_bar(p, Dr1Ind, Dr2Ind, concs, odeParams[:, 1, 1])
```

# LPT and GEM
```julia
Dr1Ind = 1
Dr2Ind = 3
make_bar(p, Dr1Ind, Dr2Ind, concs, odeParams[:, 1, 1])
```

# LPT and TXL
```julia
Dr1Ind = 1
Dr2Ind = 4
make_bar(p, Dr1Ind, Dr2Ind, concs, odeParams[:, 1, 1])
```

# LPT and PLB
```julia
Dr1Ind = 1
Dr2Ind = 5
make_bar(p, Dr1Ind, Dr2Ind, concs, odeParams[:, 1, 1])
```

# DOX and GEM
```julia
Dr1Ind = 2
Dr2Ind = 3
make_bar(p, Dr1Ind, Dr2Ind, concs, odeParams[:, 1, 1])
```

# DOX and TXL
```julia
Dr1Ind = 2
Dr2Ind = 4
make_bar(p, Dr1Ind, Dr2Ind, concs, odeParams[:, 1, 1])
```

# DOX and PLB
```julia
Dr1Ind = 2
Dr2Ind = 5
make_bar(p, Dr1Ind, Dr2Ind, concs, odeParams[:, 1, 1])
```

# GEM and TXL
```julia
Dr1Ind = 3
Dr2Ind = 4
make_bar(p, Dr1Ind, Dr2Ind, concs, odeParams[:, 1, 1])
```

# GEM and PLB
```julia
Dr1Ind = 3
Dr2Ind = 5
make_bar(p, Dr1Ind, Dr2Ind, concs, odeParams[:, 1, 1])
```

# TXL and PLB
```julia
Dr1Ind = 4
Dr2Ind = 5
make_bar(p, Dr1Ind, Dr2Ind, concs, odeParams[:, 1, 1])
```
