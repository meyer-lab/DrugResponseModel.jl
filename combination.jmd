---
weave_options:
  error: true
  echo: false
---
upper Bliss based on Cell cycle model. Lower Bliss based on pure data

```julia
import Pkg; Pkg.instantiate()

Pkg.activate(".")
using DrugResponseModel
using ExponentialUtilities
using Plots
Plots.scalefontsizes(0.7)

concs, populations1, g1s1, g2s1 = load(189, 1);
concs, populations2, g1s2, g2s2 = load(189, 2);
concs, populations3, g1s3, g2s3 = load(189, 3);
g0 = g1s1[1,1,1]+g2s1[1,1,1];

g1avg = (g1s1 .+ g1s2 .+ g1s3) ./ 3; # pure data
g2avg = (g2s1 .+ g2s2 .+ g2s3) ./ 3; # pure data
popavg = g1avg .+ g2avg;

# this is the optimum estimated parameters for all drugs at once, and considers % in G1 separately for drugs. ==> 41 parameters
p = [97.7434, 1.41726, 0.0501761, 0.930205, 0.111494, 0.123604, 0.552216, 
     92.9045, 1.40024, 0.996396, 0.0513087, 0.521831, 0.6535, 0.566578, 
     15.5317, 2.3689, 0.592433, 0.999986, 0.0283363, 0.286975, 0.503328, 
     3.96929, 4.62768, 0.0512281, 0.307528, 0.549714, 0.378717, 0.50959, 
     63.4248, 0.976052, 0.16582, 0.740009, 0.0572609, 0.0776912, 0.534201, 
     0.734513, 0.375555, 16.8387, 12.3945, 30.176, 14.5352]

IC50_lap, IC50_dox, IC50_gem, IC50_tax, IC50_pal = DrugResponseModel.find_IC(popavg, 0.5);
println("IC50s from the data: \n lpt ", concs[IC50_lap,1], " dox ", concs[IC50_dox,2], " gem ", concs[IC50_gem,3], " tax ", concs[IC50_tax,4], " pal ", concs[IC50_pal,5])
println("\n IC50s from the model: \n lpt ", p[1], " dox ", p[8], " gem ", p[15], " tax ", p[22], " pal ", p[29])
effs = getODEparamsAll(p, concs);

# These are parameters from fitting each drug individually.
lapat_before = [43.1527, 0.966066, 0.149468, 1.07396, 0.20995, 0.373793, 0.0079829, 0.0202241, 0.536791, 21.7392, 7.00735, 0.101821, 1.41611];
dox_before = [95.5176, 0.141023, 0.0453853, 0.846542, 0.164408, 1.00001e-9, 0.0720467, 0.14468, 0.689475, 3.66135, 5.46383, 4.29732, 2.9077];
gemc_before = [10.37136, 0.976559, 0.95372, 2.03741, 0.1871880, 0.4303, 0.009946, 0.1226, 0.52401, 20.15357, 6.05552, 2.8544, 4.0875];
pac_before = [3.33798, 0.768057, 1.00004e-9, 3.01442, 0.27915, 0.0669792, 0.0570235, 0.0385754, 0.501908, 17.3979, 9.04839, 2.0261, 1.64753];
pal_before = [26.8681, 0.843195, 0.337619, 0.895753, 0.359512, 0.632667, 0.00720161, 0.0401928, 0.577674, 18.8691, 11.3867, 31.7324, 1.16337];

lapat = DrugResponseModel.getODEparams(lapat_before, concs[:, 1]);
dox = DrugResponseModel.getODEparams(dox_before, concs[:, 2]);
gemc = DrugResponseModel.getODEparams(gemc_before, concs[:, 3]);
pac = DrugResponseModel.getODEparams(pac_before, concs[:, 4]);
pal = DrugResponseModel.getODEparams(pal_before, concs[:, 5]);
```


```julia
# Bliss on pure cell numbers
BlissOnData = DrugResponseModel.blissCellNum(g1avg, g2avg; n = 8); # includes are combinations 8 x 8 x 10

```

## Lapatinib and doxorubicin

```julia
bliss_comb = DrugResponseModel.fullCombinationParam(lapat, dox, effs, 8)
bliss_comb_cellnum = BlissModelComb(bliss_comb, g0)

p1=Heatmap(concs, bliss_comb_cellnum, 1, 2, "Lpt", "Dox", "Bliss Cell Cycle Model")
p2=Heatmap(concs, BlissOnData[:, :, 1], 1, 2, "Lpt", "Dox", "Bliss Data")

plot(p1, p2, size=(400, 550), layout=(2, 1))
```

## Lapatinib and gemcitabine

```julia
bliss_comb = DrugResponseModel.fullCombinationParam(lapat, gemc, effs, 8)
bliss_comb_cellnum = BlissModelComb(bliss_comb, g0)

p1=Heatmap(concs, bliss_comb_cellnum, 1, 3, "Lpt", "Gem", "Bliss Cell Cycle Model")
p2=Heatmap(concs, BlissOnData[:, :, 2], 1, 3, "Lpt", "Gem", "Bliss Data")

plot(p1, p2, size=(400, 550), layout=(2, 1))
```


## Lapatinib and paclitaxel

```julia
bliss_comb = DrugResponseModel.fullCombinationParam(lapat, pac, effs, 8)
bliss_comb_cellnum = BlissModelComb(bliss_comb, g0)

p1=Heatmap(concs, bliss_comb_cellnum, 1, 4, "Lpt", "Tax", "Bliss Cell Cycle Model")
p2=Heatmap(concs, BlissOnData[:, :, 3], 1, 4, "Lpt", "Tax", "Bliss Data")
plot(p1, p2, size=(400, 550), layout=(2, 1))
```

## Lapatinib and palbociclib

```julia
bliss_comb = DrugResponseModel.fullCombinationParam(lapat, pal, effs, 8)
bliss_comb_cellnum = BlissModelComb(bliss_comb, g0)

p1=Heatmap(concs, bliss_comb_cellnum, 1, 5, "Lpt", "Palbo", "Bliss Cell Cycle Model")
p2=Heatmap(concs, BlissOnData[:, :, 4], 1, 5, "Lpt", "Palbo", "Bliss Data")
plot(p1, p2, size=(400, 550), layout=(2, 1))
```

## Doxorubicin and gemcitabine
```julia
bliss_comb = DrugResponseModel.fullCombinationParam(dox, gemc, effs, 8)
bliss_comb_cellnum = BlissModelComb(bliss_comb, g0)

p1=Heatmap(concs, bliss_comb_cellnum, 2, 3, "Dox", "Gem", "Bliss Cell Cycle Model")
p2=Heatmap(concs, BlissOnData[:, :, 5], 2, 3, "Dox", "Gem", "Bliss Data")
plot(p1, p2, size=(400, 550), layout=(2, 1))
```

## Doxorubicin and paclitaxel
```julia
bliss_comb = DrugResponseModel.fullCombinationParam(dox, pac, effs, 8)
bliss_comb_cellnum = BlissModelComb(bliss_comb, g0)

p1=Heatmap(concs, bliss_comb_cellnum, 2, 4, "Dox", "Tax", "Bliss Cell Cycle Model")
p2=Heatmap(concs, BlissOnData[:, :, 6], 2, 4, "Dox", "Tax", "Bliss Data")
plot(p1, p2, size=(400, 550), layout=(2, 1))
```


## Doxorubicin and palbociclib
```julia
bliss_comb = DrugResponseModel.fullCombinationParam(dox, pal, effs, 8)
bliss_comb_cellnum = BlissModelComb(bliss_comb, g0)

p1=Heatmap(concs, bliss_comb_cellnum, 2, 5, "Dox", "Palbo", "Bliss Cell Cycle Model")
p2=Heatmap(concs, BlissOnData[:, :, 7], 2, 5, "Dox", "Palbo", "Bliss Data")
plot(p1, p2, size=(400, 550), layout=(2, 1))
```


## Gemcitabine and paclitaxel
```julia
bliss_comb = DrugResponseModel.fullCombinationParam(gemc, pac, effs, 8)
bliss_comb_cellnum = BlissModelComb(bliss_comb, g0)

p1=Heatmap(concs, bliss_comb_cellnum, 3, 4, "Gem", "Tax", "Bliss Cell Cycle Model")
p2=Heatmap(concs, BlissOnData[:, :, 8], 3, 4, "Gem", "Tax", "Bliss Data")
plot(p1, p2, size=(400, 550), layout=(2, 1))
```
### To show what is going on in this figure, we plot the parameters over concentrations.
```julia
function plot_dummy(i, concs, pac, bliss_comb, ylabel)
  p = plot(concs[:, 4], pac[i, :], label="taxol alone", ylabel=ylabel, xlabel="taxol conc.")
  plot!(concs[:, 4], bliss_comb[i, 5, :], label="tx & 5nM gm")
  plot!(concs[:, 4], bliss_comb[i, 6, :], label="tx & 10nM gm")
  plot!(concs[:, 4], bliss_comb[i, 7, :], label="tx & 30nM gm")
  plot!(concs[:, 4], bliss_comb[i, 8, :], label="tx & 100nM gm")
  return p
end

p1 = plot_dummy(1, concs, pac, bliss_comb, "g1 prog. rate")
p2 = plot_dummy(2, concs, pac, bliss_comb, "g2 prog. rate")
p3 = plot_dummy(3, concs, pac, bliss_comb, "g1 death rate")
p4 = plot_dummy(4, concs, pac, bliss_comb, "g1 death rate")

plot(p1, p2, p3, p4)
ylims!((0.0, 0.85))
```

### To show what is going on in this figure, we plot the time series over time.

```julia
function plot_dummy2(i, concs, bliss_comb, g0)
  t = 0.0:0.5:192.0 
  g5t_g1, g5t_g2 = predict(bliss_comb[:, 5, i], g0, t)
  g5t1_g1, g5t1_g2 = predict(bliss_comb[:, 6, i], g0, t)
  g5t2_g1, g5t2_g2 = predict(bliss_comb[:, 7, i], g0, t)
  g5t3_g1, g5t3_g2 = predict(bliss_comb[:, 8, i], g0, t)
  p = plot(t, g5t_g1 .+ g5t_g2, label=string("taxol", concs[i, 4], " & gem 5"), ylabel="cell #", xlabel="time [hr]")
  plot!(t, g5t1_g1 .+ g5t1_g2, label=string("taxol", concs[i, 4], " & gem 10"), ylabel="cell #", xlabel="time [hr]")
  plot!(t, g5t2_g1 .+ g5t2_g2, label=string("taxol", concs[i, 4], " gem 30"), ylabel="cell #", xlabel="time [hr]")
  plot!(t, g5t3_g1 .+ g5t3_g2, label=string("taxol", concs[i, 4], "& gem 100"), ylabel="cell #", xlabel="time [hr]")
  return p
end

p1 = [plot_dummy2(i, concs, bliss_comb, g0) for i=1:8]
plot(p1..., layout=(2,4))
ylims!((0.0, 50.0))
```

## Gemcitabine and palbociclib
```julia
bliss_comb = DrugResponseModel.fullCombinationParam(gemc, pal, effs, 8)
bliss_comb_cellnum = BlissModelComb(bliss_comb, g0)

p1=Heatmap(concs, bliss_comb_cellnum, 3, 5, "Gem", "Palbo", "Bliss Cell Cycle Model")
p2=Heatmap(concs, BlissOnData[:, :, 9], 3, 5, "Gem", "Palbo", "Bliss Data")
plot(p1, p2, size=(400, 550), layout=(2, 1))
```

## Paclitaxel and palbociclib
```julia
bliss_comb = DrugResponseModel.fullCombinationParam(pac, pal, effs, 8)
bliss_comb_cellnum = BlissModelComb(bliss_comb, g0)

p1=Heatmap(concs, bliss_comb_cellnum, 4, 5, "Tax", "Palbo", "Bliss Cell Cycle Model")
p2=Heatmap(concs, BlissOnData[:, :, 10], 4, 5, "Tax", "Palbo", "Bliss Data")
plot(p1, p2, size=(400, 550), layout=(2, 1))
```
