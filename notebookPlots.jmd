
This file contains all the drugs, separately.

```julia; echo=false
using DrugResponseModel
using Plots, Statistics

# import data from the path
concs, populations1, g1s1, g2s1 = load(189, 1);
concs, populations2, g1s2, g2s2 = load(189, 2);
concs, populations3, g1s3, g2s3 = load(189, 3);
g0 = g1s1[1,1,1]+g2s1[1,1,1];

# costt, ps1 = optimize_hill(concs[:, 1], g1s1[:, :, 1], g2s1[:, :, 1], maxstep = 1E5)
ps1 = [42.9991, 0.322169, 0.0216808, 1.18987, 0.40185, 0.624496, 0.00761389, 0.0203664, 0.532923, 8.95115, 15.308, 0.212071, 2.51641];
ps2 =  [37.0596, 0.448348, 0.0667311, 1.20681, 0.763462, 1.02403, 0.00923001, 0.010702, 0.530061, 9.60726, 21.6465, 0.290888, 2.71295];
ps3 = [59.3718, 0.414454, 4.10103e-5, 0.790687, 0.569625, 1.05558, 0.00888337, 0.0158748, 0.528184, 9.75081, 20.3636, 0.282688, 2.13722];
```

```julia; echo=false
effects1 = getODEparams(ps1, concs[:, 1]);
effects2 = getODEparams(ps2, concs[:, 1]);
effects3 = getODEparams(ps3, concs[:, 1]);
```

```julia; echo=false
function fordata(G1_1, G1_2, G1_3, G2_1, G2_2, G2_3)

    meanG1 = ones(189, 8)
    meanG2 = ones(189, 8)
    stdG1 = ones(189, 8)
    stdG2 = ones(189, 8)
    for j = 1:8
        for k = 1:189
            meanG1[k, j] = mean([G1_1[k, j], G1_2[k, j], G1_3[k, j]])
            meanG2[k, j] = mean([G2_1[k, j], G2_2[k, j], G2_3[k, j]])
            stdG1[k, j] = std([G1_1[k, j], G1_2[k, j], G1_3[k, j]])
            stdG2[k, j] = std([G2_1[k, j], G2_2[k, j], G2_3[k, j]])
        end
    end
    return meanG1, meanG2, stdG1, stdG2
end

function find_simulation(p1, p2, p3, concs1, g0)
    t = LinRange(0.0, 95.0, 189)
    G1_1 = ones(189, 8)
    G2_1 = ones(189, 8)
    G1_2 = ones(189, 8)
    G2_2 = ones(189, 8)
    G1_3 = ones(189, 8)
    G2_3 = ones(189, 8)

    for i = 1:8 # concentration number
        G1_1[:, i], G2_1[:, i], _ = predict(p1[:, i], g0, t)
        G1_2[:, i], G2_2[:, i], _ = predict(p2[:, i], g0, t)
        G1_3[:, i], G2_3[:, i], _ = predict(p3[:, i], g0, t)
    end

    return G1_1, G2_1, G1_2, G2_2, G1_3, G2_3 # all simulation
end

function plot3(G1_1, G1_2, G1_3, G2_1, G2_2, G2_3, meang1, meang2, stdg1, stdg2, conc)
    time = LinRange(0.0, 95.0, 189)
    title = string(conc, " nM")
    plot(time, meang1; ribbon = stdg1, color=6, label = "", xlabel = "time [hr]", ylabel = "cell number", alpha = 0.05)
    plot!(time, G1_1, label="G1", color = 6)
    plot!(time, G1_2, label="", color = 6)
    plot!(time, G1_3, label="", color = 6)
    plot!(time, meang2; ribbon = stdg2, color=7, label = "", alpha = 0.05)
    plot!(time, G2_1, label="G2", color = 7)
    plot!(time, G2_2, label="", color = 7)
    plot!(time, G2_3, label="", color = 7)
    plot!(annotation = [(45, 40, text(title, 8))])
    ylims!((0.0, 45))
end


G1_1, G2_1, G1_2, G2_2, G1_3, G2_3 = find_simulation(effects1, effects2, effects3, concs[:, 1], g0) # for lapatinib

meanG1, meanG2, stdG1, stdG2 = fordata(g1s1[:, :, 1], g1s2[:, :, 1], g1s3[:, :, 1], g2s1[:, :, 1], g2s2[:, :, 1], g2s3[:, :, 1])
```

## Lapatinib
### Plotting the time-series simulations compared to the actual data for three replicates.

```julia; echo=false
function plot4(G1_1, G2_1, meang1, meang2, stdg1, stdg2, conc, i, j)
    time = LinRange(0.0, 95.0, 189)
    title = string(conc, " nM")
    plot(time, meang1; ribbon = stdg1, color=i, label = "", xlabel = "time [hr]", ylabel = "cell number", alpha = 0.05)
    plot!(time, G1_1, label="G1", color = i)
    plot!(time, meang2; ribbon = stdg2, color=j, label = "", alpha = 0.05)
    plot!(time, G2_1, label="G2", color = j)
    plot!(annotation = [(45, 45, text(title, 8))])
    ylims!((0.0, 50))
end

p1 = plot4(G1_2[:, 1], G2_2[:, 1], meang1[:, 1], meang2[:, 1], stdg1[:, 1], stdg2[:, 1], conc[1, 1], 3, 4);
p2 = plot4(G1_2[:, 5], G2_2[:, 5], meang1[:, 5], meang2[:, 5], stdg1[:, 5], stdg2[:, 5], conc[1, 5], 5, 6);
p3 = plot4(G1_2[:, 8], G2_2[:, 8], meang1[:, 8], meang2[:, 8], stdg1[:, 8], stdg2[:, 8], conc[1, 8], 7, 8);
plot(p1)
plot!(p2)
plot!(p3)
plot!(size=(1000,700))
```

```julia; echo=false
pl = [plot3(G1_1[:, i], G1_2[:, i], G1_3[:, i], G2_1[:, i], G2_2[:, i], G2_3[:, i], meanG1[:, i], meanG2[:, i], stdG1[:, i], stdG2[:, i], concs[i, 1]) for i=1:8]
plot(pl..., size=(1000,700))
```

### Plot the parameters over concentration; these are known as the drug effects

```julia; echo=false
std = zeros(4,8)
plot_parameters(concs[:,1], effects1, std)
```

### Sensitivity analysis

```julia; echo=false
result, paramRanges = allSensitivity(ps1, concs[:, 1], g1s1[:, :, 1], g2s1[:, :, 1])
pl = [plotUnitSensitivity(paramRanges[:, i], result[:, i], ps1[i], i) for i=1:11]
plot(pl...)
plot!(size=(1200, 800))
```

## Doxorubicin

```julia; echo=false
p1 = [494.867, 0.762569, 0.703234, 0.637796, 0.323034, 1.42901, 0.0826001, 0.375677, 0.599994, 18.127, 10.5583, 2.31724, 2.72285];
p2 = [106.434, 0.977652, 0.146036, 0.861029, 0.327639, 2.44912e-6, 0.0963328, 0.182144, 0.599999, 19.8484, 10.9186, 5.63048, 3.61192];
p3 = [78.7602, 0.44481, 0.0819257, 0.930385, 0.32925, 4.28135e-5, 0.0859336, 0.170148, 0.59999, 10.4141, 10.4449, 5.6001, 3.7104]
```

```julia; echo=false
effects1 = getODEparams(p1, concs[:, 2]);
effects2 = getODEparams(p2, concs[:, 2]);
effects3 = getODEparams(p3, concs[:, 2]);
```

```julia; echo=false
G1_1, G2_1, G1_2, G2_2, G1_3, G2_3 = find_simulation(effects1, effects2, effects3, concs[:, 2], g0) # for doxorubicin
meanG1, meanG2, stdG1, stdG2 = fordata(g1s1[:, :, 2], g1s2[:, :, 2], g1s3[:, :, 2], g2s1[:, :, 2], g2s2[:, :, 2], g2s3[:, :, 2])


```julia; echo=false
pl = [plot3(G1_1[:, i], G1_2[:, i], G1_3[:, i], G2_1[:, i], G2_2[:, i], G2_3[:, i], meanG1[:, i], meanG2[:, i], stdG1[:, i], stdG2[:, i], concs[i, 2]) for i=1:8]
plot(pl..., size=(1000,700))
```

### Plot the parameters over concentration; these are known as the drug effects

```julia; echo=false
std = zeros(4,8)
plot_parameters(concs[:,2], effects1, std)
```

### Sensitivity analysis

```julia; echo=false
result, paramRanges = allSensitivity(p1, concs[:, 2], g1s1[:, :, 2], g2s1[:, :, 2])
pl = [plotUnitSensitivity(paramRanges[:, i], result[:, i], p1[i], i) for i=1:11]
plot(pl...)
plot!(size=(1200, 800))
```

## Gemcitabine

```julia; echo=false
p1 = [11.9233, 0.58781, 0.682964, 2.08271, 0.290042, 0.884223, 0.042281, 0.193428, 0.545268, 13.3209, 10.5829, 3.5772, 10.3274];
p2 = [9.37154, 0.567506, 0.576591, 2.69545, 1.12055, 2.50093, 0.0302259, 0.166029, 0.462917, 11.4632, 31.5679, 3.71661, 8.57658];
p3 = [14.7254, 0.60611, 0.607182, 2.4846, 0.621001, 2.39721, 0.0398666, 0.260305, 0.480246, 12.8007, 21.3855, 3.48551, 14.4457];
```

```julia; echo=false
effects1 = getODEparams(p1, concs[:, 3]);
effects2 = getODEparams(p2, concs[:, 3]);
effects3 = getODEparams(p3, concs[:, 3]);
```

```julia; echo=false
G1_1, G2_1, G1_2, G2_2, G1_3, G2_3 = find_simulation(effects1, effects2, effects3, concs[:, 3], g0) # for Gemcitabine
meanG1, meanG2, stdG1, stdG2 = fordata(g1s1[:, :, 3], g1s2[:, :, 3], g1s3[:, :, 3], g2s1[:, :, 3], g2s2[:, :, 3], g2s3[:, :, 3])


```julia; echo=false
pl = [plot3(G1_1[:, i], G1_2[:, i], G1_3[:, i], G2_1[:, i], G2_2[:, i], G2_3[:, i], meanG1[:, i], meanG2[:, i], stdG1[:, i], stdG2[:, i], concs[i, 3]) for i=1:8]
plot(pl..., size=(1000,700))
```

### Plot the parameters over concentration; these are known as the drug effects

```julia; echo=false
std = zeros(4,8)
plot_parameters(concs[:,3], effects1, std)
```

### Sensitivity analysis

```julia; echo=false
result, paramRanges = allSensitivity(p1, concs[:, 3], g1s1[:, :, 3], g2s1[:, :, 3])
pl = [plotUnitSensitivity(paramRanges[:, i], result[:, i], p1[i], i) for i=1:11]
plot(pl...)
plot!(size=(1200, 800))
```

## Paclitaxel

```julia; echo=false
p1 = [2.86883, 0.738378, 1.08344e-9, 2.47463, 0.308802, 0.0403115, 0.049593, 0.0309074, 0.574614, 19.6009, 10.6076, 2.30608, 1.45019];
p2 = [3.56092, 0.772971, 0.118196, 2.66166, 0.436672, 0.14033, 0.0877691, 0.0481839, 0.456908, 15.3122, 13.0191, 3.4835, 1.80713];
p3 = [3.05457, 0.856089, 0.148589, 6.46391, 0.291542, 0.0979095, 0.0470583, 0.0415147, 0.481111, 19.5458, 10.6196, 2.21889, 1.48875];
```

```julia; echo=false
effects1 = getODEparams(p1, concs[:, 4]);
effects2 = getODEparams(p2, concs[:, 4]);
effects3 = getODEparams(p3, concs[:, 4]);
```

```julia; echo=false
G1_1, G2_1, G1_2, G2_2, G1_3, G2_3 = find_simulation(effects1, effects2, effects3, concs[:, 4], g0) # for Paclitaxel
meanG1, meanG2, stdG1, stdG2 = fordata(g1s1[:, :, 4], g1s2[:, :, 4], g1s3[:, :, 4], g2s1[:, :, 4], g2s2[:, :, 4], g2s3[:, :, 4])


```julia; echo=false
pl = [plot3(G1_1[:, i], G1_2[:, i], G1_3[:, i], G2_1[:, i], G2_2[:, i], G2_3[:, i], meanG1[:, i], meanG2[:, i], stdG1[:, i], stdG2[:, i], concs[i, 4]) for i=1:8]
plot(pl..., size=(1000,700))
```

### Plot the parameters over concentration; these are known as the drug effects

```julia; echo=false
std = zeros(4,8)
plot_parameters(concs[:,4], effects1, std)
```

### Sensitivity analysis

```julia; echo=false
result, paramRanges = allSensitivity(p1, concs[:, 4], g1s1[:, :, 4], g2s1[:, :, 4])
pl = [plotUnitSensitivity(paramRanges[:, i], result[:, i], p1[i], i) for i=1:11]
plot(pl...)
plot!(size=(1200, 800))
```

## Palbociclib

```julia;echo=false
p1 = [25.4732, 0.759354, 0.304341, 0.833412, 1.09647, 1.74114, 0.00839442, 0.042315, 0.599998, 19.6811, 33.3422, 29.3172, 1.05778];
p2 = [22.309, 0.912702, 0.372627, 0.891832, 0.486649, 0.762721, 0.00745086, 0.0313323, 0.530128, 17.5237, 14.0206, 1.86141, 1.5672];
p3 = [42.3216, 0.615337, 0.165559, 0.788022, 0.832693, 1.77446, 0.0168269, 0.0525446, 0.566758, 13.6348, 27.7363, 24.4526, 2.32304];
```

```julia; echo=false
effects1 = getODEparams(p1, concs[:, 5]);
effects2 = getODEparams(p2, concs[:, 5]);
effects3 = getODEparams(p3, concs[:, 5]);
```

```julia; echo=false
G1_1, G2_1, G1_2, G2_2, G1_3, G2_3 = find_simulation(effects1, effects2, effects3, concs[:, 2], g0) # for Palbociclib
meanG1, meanG2, stdG1, stdG2 = fordata(g1s1[:, :, 5], g1s2[:, :, 5], g1s3[:, :, 5], g2s1[:, :, 5], g2s2[:, :, 5], g2s3[:, :, 5])


```julia; echo=false
pl = [plot3(G1_1[:, i], G1_2[:, i], G1_3[:, i], G2_1[:, i], G2_2[:, i], G2_3[:, i], meanG1[:, i], meanG2[:, i], stdG1[:, i], stdG2[:, i], concs[i, 5]) for i=1:8]
plot(pl..., size=(1000,700))
```

### Plot the parameters over concentration; these are known as the drug effects

```julia; echo=false
std = zeros(4,8)
plot_parameters(concs[:,5], effects1, std)
```

### Sensitivity analysis

```julia; echo=false
result, paramRanges = allSensitivity(p1, concs[:, 5], g1s1[:, :, 5], g2s1[:, :, 5])
pl = [plotUnitSensitivity(paramRanges[:, i], result[:, i], p1[i], i) for i=1:11]
plot(pl...)
plot!(size=(1200, 800))
```