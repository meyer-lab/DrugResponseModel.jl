---
weave_options:
  error: false
  echo: false
---

This file contains all the drugs, separately.

```julia
import Pkg; Pkg.instantiate()
Pkg.activate(".")
using DrugResponseModel
using Plots, Statistics
concs, _, g1s1, g2s1 = load(189, 1);
_, _, g1s2, g2s2 = load(189, 2);
_, _, g1s3, g2s3 = load(189, 3);
```

```julia
# costt, ps1 = optimize_hill(concs[:, 1], g1s1[:, :, 1], g2s1[:, :, 1], maxstep = 1E5)
# TODO: These are dummy parameters, they should be updated after fitting correctly.
p1 = rand(20)
p2 = rand(20)
p3 = rand(20)
pps1 = copy(p1);
```

```julia
effects1 = getODEparams(p1, concs[:, 1]);
effects2 = getODEparams(p2, concs[:, 1]);
effects3 = getODEparams(p3, concs[:, 1]);
```

```julia
G1, G2 = DrugResponseModel.predict_replicates(effects1, effects2, effects3, effects1[:, 1, 1]); # for lapatinib
```

## Lapatinib
### Plotting the time-series simulations compared to the actual data for three replicates.

```julia
pl = [DrugResponseModel.plot2(G1[:, i, :], G2[:, i, :], g1s1, g1s2, g1s3, g2s1, g2s2, g2s3, concs[i, 1], i, 1) for i=1:8]
plot(pl..., size=(1000,700))
```

### Plot the parameters over concentration; these are known as the drug effects

```julia
meann, stdd = DrugResponseModel.mean_std_params(effects1[:, :, 1], effects2[:, :, 1], effects3[:, :, 1])
DrugResponseModel.plot_parameters(concs[:,1], meann; stdn=stdd)
```

### Sensitivity analysis

```julia
result, paramRanges = DrugResponseModel.allSensitivity(pps1, concs[:, 1], g1s1[:, :, 1], g2s1[:, :, 1]);
pl = [DrugResponseModel.plotUnitSensitivity(paramRanges[:, i], result[:, i], p1[i], i) for i=1:11]
plot(pl...)
plot!(size=(1200, 800))
```

## Doxorubicin

```julia
# p1 = [494.867, 0.762569, 0.703234, 0.637796, 0.323034, 1.42901, 0.0826001, 0.375677, 0.599994];
# p2 = [106.434, 0.977652, 0.146036, 0.861029, 0.327639, 2.44912e-6, 0.0963328, 0.182144, 0.599999];
# p3 = [78.7602, 0.44481, 0.0819257, 0.930385, 0.32925, 4.28135e-5, 0.0859336, 0.170148, 0.59999];
```

```julia
effects1 = getODEparams(p1, concs[:, 2]);
effects2 = getODEparams(p2, concs[:, 2]);
effects3 = getODEparams(p3, concs[:, 2]);
```

```julia
G1, G2 = DrugResponseModel.predict_replicates(effects1[:, :, 1], effects2[:, :, 1], effects3[:, :, 1], effects3[:, 1, 1]); # for doxorubicin
```

```julia
pl = [DrugResponseModel.plot2(G1[:, i, :], G2[:, i, :], g1s1, g1s2, g1s3, g2s1, g2s2, g2s3, concs[i, 2], i, 2) for i=1:8]
plot(pl..., size=(1000,700))
```

### Plot the parameters over concentration; these are known as the drug effects

```julia
meann, stdd = DrugResponseModel.mean_std_params(effects1[:, :, 1], effects2, effects3)
DrugResponseModel.plot_parameters(concs[:,2], meann; stdn=stdd)
```

### Sensitivity analysis

```julia
result, paramRanges = DrugResponseModel.allSensitivity(pps1, concs[:, 2], g1s1[:, :, 2], g2s1[:, :, 2]);
pl = [DrugResponseModel.plotUnitSensitivity(paramRanges[:, i], result[:, i], p1[i], i) for i=1:11]
plot(pl...)
plot!(size=(1200, 800))
```

## Gemcitabine

```julia
# p1 = [11.9233, 0.58781, 0.682964, 2.08271, 0.290042, 0.884223, 0.042281, 0.193428, 0.545268];
# p2 = [9.37154, 0.567506, 0.576591, 2.69545, 1.12055, 2.50093, 0.0302259, 0.166029, 0.462917];
# p3 = [14.7254, 0.60611, 0.607182, 2.4846, 0.621001, 2.39721, 0.0398666, 0.260305, 0.480246];
```

```julia
effects1 = getODEparams(p1, concs[:, 3]);
effects2 = getODEparams(p2, concs[:, 3]);
effects3 = getODEparams(p3, concs[:, 3]);
```

```julia
G1, G2 = DrugResponseModel.predict_replicates(effects1[:, :, 1], effects2[:, :, 1], effects3[:, :, 1], effects3[:, 1, 1]); # for Gemcitabine
```

```julia
pl = [DrugResponseModel.plot2(G1[:, i, :], G2[:, i, :], g1s1, g1s2, g1s3, g2s1, g2s2, g2s3, concs[i, 3], i, 3) for i=1:8]
plot(pl..., size=(1000,700))
```

### Plot the parameters over concentration; these are known as the drug effects

```julia
meann, stdd = DrugResponseModel.mean_std_params(effects1, effects2, effects3)
DrugResponseModel.plot_parameters(concs[:,3], meann; stdn=stdd)
```

### Sensitivity analysis

```julia
result, paramRanges = DrugResponseModel.allSensitivity(pps1, concs[:, 3], g1s1[:, :, 3], g2s1[:, :, 3])
pl = [DrugResponseModel.plotUnitSensitivity(paramRanges[:, i], result[:, i], p1[i], i) for i=1:11]
plot(pl...)
plot!(size=(1200, 800))
```

## Paclitaxel

```julia
# p1 = [2.86883, 0.738378, 1.08344e-9, 2.47463, 0.308802, 0.0403115, 0.049593, 0.0309074, 0.574614];
# p2 = [3.56092, 0.772971, 0.118196, 2.66166, 0.436672, 0.14033, 0.0877691, 0.0481839, 0.456908];
# p3 = [3.05457, 0.856089, 0.148589, 6.46391, 0.291542, 0.0979095, 0.0470583, 0.0415147, 0.481111];
```

```julia
effects1 = getODEparams(p1, concs[:, 4]);
effects2 = getODEparams(p2, concs[:, 4]);
effects3 = getODEparams(p3, concs[:, 4]);
```

```julia
G1, G2 = DrugResponseModel.predict_replicates(effects1[:, :, 1], effects2[:, :, 1], effects3[:, :, 1], effects3[:, 1, 1]); # for Paclitaxel
```

```julia
pl = [DrugResponseModel.plot2(G1[:, i, :], G2[:, i, :], g1s1, g1s2, g1s3, g2s1, g2s2, g2s3, concs[i, 4], i, 4) for i=1:8]
plot(pl..., size=(1000,700))
```

### Plot the parameters over concentration; these are known as the drug effects

```julia
meann, stdd = DrugResponseModel.mean_std_params(effects1, effects2, effects3)
DrugResponseModel.plot_parameters(concs[:,4], meann; stdn=stdd)
```

### Sensitivity analysis

```julia
result, paramRanges = DrugResponseModel.allSensitivity(pps1, concs[:, 4], g1s1[:, :, 4], g2s1[:, :, 4])
pl = [DrugResponseModel.plotUnitSensitivity(paramRanges[:, i], result[:, i], p1[i], i) for i=1:11]
plot(pl...)
plot!(size=(1200, 800))
```

## Palbociclib

```julia;echo=false
# p1 = [25.4732, 0.759354, 0.304341, 0.833412, 1.09647, 1.74114, 0.00839442, 0.042315, 0.599998];
# p2 = [22.309, 0.912702, 0.372627, 0.891832, 0.486649, 0.762721, 0.00745086, 0.0313323, 0.530128];
# p3 = [42.3216, 0.615337, 0.165559, 0.788022, 0.832693, 1.77446, 0.0168269, 0.0525446, 0.566758];
```

```julia
effects1 = getODEparams(p1, concs[:, 5]);
effects2 = getODEparams(p2, concs[:, 5]);
effects3 = getODEparams(p3, concs[:, 5]);
```

```julia
G1, G2 = DrugResponseModel.predict_replicates(effects1[:, :, 1], effects2[:, :, 1], effects3[:, :, 1], effects3[:, 1, 1]); # for Palbociclib
```

```julia
pl = [DrugResponseModel.plot2(G1[:, i, :], G2[:, i, :], g1s1, g1s2, g1s3, g2s1, g2s2, g2s3, concs[i, 5], i, 5) for i=1:8]
plot(pl..., size=(1000,700))
```

### Plot the parameters over concentration; these are known as the drug effects

```julia
meann, stdd = DrugResponseModel.mean_std_params(effects1, effects2, effects3)
DrugResponseModel.plot_parameters(concs[:,5], meann; stdn=stdd)
```

### Sensitivity analysis

```julia
result, paramRanges = DrugResponseModel.allSensitivity(pps1, concs[:, 5], g1s1[:, :, 5], g2s1[:, :, 5])
pl = [DrugResponseModel.plotUnitSensitivity(paramRanges[:, i], result[:, i], p1[i], i) for i=1:11]
plot(pl...)
plot!(size=(1200, 800))
```
