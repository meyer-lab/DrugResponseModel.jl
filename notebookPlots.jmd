
This file contains all the drugs, separately.

```julia; echo=false
using DrugResponseModel
using Plots, Statistics

# import data from the path
concs, populations1, g1s1, g2s1 = load(189, 1);
concs, populations2, g1s2, g2s2 = load(189, 2);
concs, populations3, g1s3, g2s3 = load(189, 3);
g0 = g1s1[1,1,1]+g2s1[1,1,1];

# costt, ps1 = optimize_hill(concs[:, 1], g1s1[:, :, 1], g2s1[:, :, 1], maxstep = 5E4)
ps1 = [42.9991, 0.322169, 0.0216808, 1.18987, 0.40185, 0.624496, 0.00761389, 0.0203664, 0.532923, 8.95115, 15.308, 0.212071, 2.51641];

ps2 =  [37.0596, 0.448348, 0.0667311, 1.20681, 0.763462, 1.02403, 0.00923001, 0.010702, 0.530061, 9.60726, 21.6465, 0.290888, 2.71295];

ps3 = [59.3718, 0.414454, 4.10103e-5, 0.790687, 0.569625, 1.05558, 0.00888337, 0.0158748, 0.528184, 9.75081, 20.3636, 0.282688, 2.13722];

effects1 = getODEparams(ps1, concs[:, 1]);
effects2 = getODEparams(ps2, concs[:, 1]);
effects3 = getODEparams(ps3, concs[:, 1]);
```

```julia; echo=false

function fordata(G1_1, G1_2, G1_3, G2_1, G2_2, G2_3)

    meanG1 = ones(189, 8)
    meanG2 = ones(189, 8)
    stdG1 = ones(189, 8)
    stdG2 = ones(189, 8)
    for j = 1:8
        for k = 1:189
            meanG1[k, j] = mean([G1_1[k, j], G1_2[k, j], G1_3[k, j]])
            meanG2[k, j] = mean([G2_1[k, j], G2_2[k, j], G2_3[k, j]])
            stdG1[k, j] = std([G1_1[k, j], G1_2[k, j], G1_3[k, j]])
            stdG2[k, j] = std([G2_1[k, j], G2_2[k, j], G2_3[k, j]])
        end
    end
    return meanG1, meanG2, stdG1, stdG2
end

function find_simulation(p1, p2, p3, concs1, g0)
    t = LinRange(0.0, 95.0, 189)
    G1_1 = ones(189, 8)
    G2_1 = ones(189, 8)
    G1_2 = ones(189, 8)
    G2_2 = ones(189, 8)
    G1_3 = ones(189, 8)
    G2_3 = ones(189, 8)

    for i = 1:8 # concentration number
        G1_1[:, i], G2_1[:, i], _ = predict(p1[:, i], g0, t)
        G1_2[:, i], G2_2[:, i], _ = predict(p2[:, i], g0, t)
        G1_3[:, i], G2_3[:, i], _ = predict(p3[:, i], g0, t)
    end

    return G1_1, G2_1, G1_2, G2_2, G1_3, G2_3 # all simulation
end

function plot3(G1_1, G1_2, G1_3, G2_1, G2_2, G2_3, meang1, meang2, stdg1, stdg2, conc)
    time = LinRange(0.0, 95.0, 189)
    plot(time, meang1; ribbon = stdg1, color=6, label = "", xlabel = "time [hr]", ylabel = "cell number", alpha = 0.05, title = string(conc, " nM"))
    plot!(time, G1_1, label="G1", color = 6)
    plot!(time, G1_2, label="", color = 6)
    plot!(time, G1_3, label="", color = 6)
    plot!(time, meang2; ribbon = stdg2, color=7, label = "", alpha = 0.05)
    plot!(time, G2_1, label="G2", color = 7)
    plot!(time, G2_2, label="", color = 7)
    plot!(time, G2_3, label="", color = 7)
    ylims!((0.0, 45))
end


G1_1, G2_1, G1_2, G2_2, G1_3, G2_3 = find_simulation(effects1, effects2, effects3, concs[:, 1], g0) # for lapatinib

meanG1, meanG2, stdG1, stdG2 = fordata(g1s1[:, :, 1], g1s2[:, :, 1], g1s3[:, :, 1], g2s1[:, :, 1], g2s2[:, :, 1], g2s3[:, :, 1])
```

## Lapatinib
### Plotting the time-series simulations compared to the actual data for three replicates.

```julia; echo=false
pl = [plot3(G1_1[:, i], G1_2[:, i], G1_3[:, i], G2_1[:, i], G2_2[:, i], G2_3[:, i], meanG1[:, i], meanG2[:, i], stdG1[:, i], stdG2[:, i], concs[i, 1]) for i=1:8]
plot(pl..., size=(1000,700))
```